#============================================================
# This file contains a dictionary of standard boilerplate
# text that can be chosen programatically to insert in the
# various BIP output files.
# 
# It also contains functions to dump customizable source file
# headers to the stdout stream.  It is intended that the main
# program will redirect this stream to point to the
# appropriate file before calling the necessary functions.
#============================================================
import sys, string, time
from string import upper
from string import lower


#---------------------------------------------------------------
# This is a dictionary of snippets of standard boilerplate text
# that appear frequently in the output files of the BIParser
#---------------------------------------------------------------
BP_Dict = {
"BP_CPP_open":
"""//-----------------------------------------------------------------------+
//  The following provides for C++ compatibility (ie, C++ routines can   |
//  explicitly use this include file).                                   |
//-----------------------------------------------------------------------+
#if defined (__cplusplus)
extern \"C\" {
#endif\n""",

"BP_CPP_close":
  """#if defined (__cplusplus)
}
#endif\n""",

"BP_tag2key":
"""  // tag2key_map
  first_tag = p_key->p_config->struct_tag;
  num_tags  = p_key->p_config->num_pkts;
  for (tag = first_tag; tag < (first_tag + num_tags); tag++) {
    p_ctl_mod->tag2key_map[tag] = p_ctl_mod->n_keys;
  }
  p_ctl_mod->n_keys++;\n\n\n""",

"BP_DNE":
"""//------------------------------------------------------------------------
//  D O     N O T     E D I T     T H I S     F I L E
//------------------------------------------------------------------------"""

}

## Customizable boilerplate text functions follow ##

#---------------------------------------------------------------------
# This writes out the needed modified boilerplate text destined for
# the TYPES header file.
#
# Parameters:
#      defname : Name of the .def file from which this was generated
#---------------------------------------------------------------------
## def write_types_header(typlat, defname, date):
##     # Print the communications structure revision code (timestamp)
##     # This has the same format as the DSP code build timestamp.
##     year   = str(time.localtime()[0])[2:]
##     month  = time.localtime()[1]
##     day    = time.localtime()[2]
##     hour   = time.localtime()[3]
##     minute = time.localtime()[4]
##     if (typlat == "core"):
##         commstruct_rev_name = "CORE_COMM_STRUCT_REV"
##     else:
##         commstruct_rev_name = typlat + "_COMM_STRUCT_REV"
        
##     print "#ifndef "+typlat+"_TYPES_A_H"
##     print "#define "+typlat+"_TYPES_A_H"
##     print ""
##     print BP_Dict["BP_DNE"]
##     print "// File         :  "+lower(typlat)+"_types_a.h"
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  :  This file was automatically generated by the BIParser."
##     print "//                 It defines the collection of communication data "
##     print "//                 structures available for the given platform(s)."
##     print "//------------------------------------------------------------------------"
##     print ""
##     print BP_Dict["BP_CPP_open"]
##     sys.stdout.write("\n#define %s  %2d%02d%02d%02d%02d\n\n" % (commstruct_rev_name, int(year), month, day, hour, minute) ) 
##     print "//-----------------------------------------------------------------------+"
##     print "// Set CONTROL SYSTEM flag                                               |"
##     print "//-----------------------------------------------------------------------+"
##     print "#if defined (CESR_VMS) || defined(CESR_UNIX)"
##     print "#define INST_CONTROL"
##     print "#if defined(INST_COMMUNICATIONS)"
##     print "#define INST_DEFINE_CONFIG"
##     print "#endif"
##     print "#endif"
##     print ""
##     print "#include \"cbi_constants.h\"\n"

##     # For a non-core output file, provide access to previously-generated
##     # core types header.
##     if typlat.find("CBI") == -1:
##         print "#include \"cbi_types_a.h\""

##     print "//================================================================\n"

def write_types_footer():
    print "\n"
    print BP_Dict["BP_CPP_close"]
    print "\n\n#endif //...types_H"


def write_types_header_new(file, inst_type, date):
    # Print the communications structure revision code (timestamp)
    # This has the same format as the DSP code build timestamp.
    year   = str(time.localtime()[0])[2:]
    month  = time.localtime()[1]
    day    = time.localtime()[2]
    hour   = time.localtime()[3]
    minute = time.localtime()[4]
    if (inst_type == 'CBI'):
        commstruct_rev_name = 'CBI_COMM_STRUCT_REV'
    else:
        commstruct_rev_name = inst_type + '_COMM_STRUCT_REV'
        
    file.write('#ifndef ' + inst_type + '_TYPES_A_H\n')
    file.write('#define ' + inst_type + '_TYPES_A_H\n')
    file.write('\n')
    file.write( BP_Dict["BP_DNE"]+'\n' )
    file.write('// File         :  ' + lower(inst_type) + '_types_a.h\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  :  This file was automatically generated by the BIParser.\n')
    file.write('//                 It defines the collection of communication data \n')
    file.write('//                 structures available for the given platform(s).\n')
    file.write('//------------------------------------------------------------------------\n')
    file.write('//\n')
    file.write( BP_Dict["BP_CPP_open"] + '\n')
    file.write('\n#define %s  %2d%02d%02d%02d%02d\n\n' % (commstruct_rev_name, int(year), month, day, hour, minute) )
    file.write( '//-----------------------------------------------------------------------+\n')
    file.write( '// Set CONTROL SYSTEM flag                                               |\n')
    file.write( '//-----------------------------------------------------------------------+\n')
    file.write( '#if defined (CESR_VMS) || defined(CESR_UNIX)\n')
    file.write( '#define INST_CONTROL\n')
    file.write( '#if defined(INST_COMMUNICATIONS)\n')
    file.write( '#define INST_DEFINE_CONFIG\n')
    file.write( '#endif\n')
    file.write( '#endif\n')
    file.write( '\n')
    file.write( '#include "cbi_constants.h" \n')

    # For a non-core output file, provide access to previously-generated
    # core types header.
    if inst_type.find('CBI') == -1:
        file.write('#include "cbi_types_a.h"\n')

    file.write( '//================================================================\n')


## def write_types_footer():
##     print "\n"
##     print BP_Dict["BP_CPP_close"]
##     print "\n\n#endif //...types_H"

def write_types_footer_new(file):
    file.write("\n")
    file.write( BP_Dict["BP_CPP_close"] )
    file.write("\n\n#endif //...types_H")
    

#---------------------------------------------------------------------
# This writes out the needed modified boilerplate text destined for
# the CONFIG header file.
#
# Parameters:
#      defname : Name of the .def file from which this was generated
#---------------------------------------------------------------------
## def write_config_header(typlat, defname, date):
##     bname = defname.replace(".def","")
##     print "#ifndef "+typlat+"_CONFIG_A_H"
##     print "#define "+typlat+"_CONFIG_A_H"
##     print ""
##     print BP_Dict["BP_DNE"]    
##     print "// File         :  "+lower(typlat)+"_config_a.h"
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  :  This file was automatically generated by the BIParser."
##     print "//                 It defines the contents of the COMM_KEY_CONFIG data"
##     print "//                 struct defs for each flagged structure from the"
##     print "//                 BIParser input (.def) file."
##     print "//------------------------------------------------------------------------"
##     print ""
##     print "#include <stdio.h>\n"
##     print BP_Dict["BP_CPP_open"]
##     print ""
##     print "#include \"cbi_conv_protos.h\""
##     print "#include \"cbi_core_inst_includes.h\""
    
##     print "#include \""+lower(typlat)+"_types_a.h\""
##     print "#include \""+lower(typlat)+"_tags_a.h\""
##     if typlat != "CBI":
##         print "#include \""+lower(typlat)+"_protos_a.h\""
##     print ""
##     print ""
##     print "//================================================================\n"


def write_config_header_new(file, inst_type, date):
    file.write('#ifndef ' + inst_type + '_CONFIG_A_H\n')
    file.write('#define ' + inst_type + '_CONFIG_A_H\n')
    file.write('\n')
    file.write( BP_Dict["BP_DNE"] + '\n')
    file.write('// File         :  ' + lower(inst_type) + '_config_a.h\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  :  This file was automatically generated by the BIParser.\n')
    file.write('//                 It defines the contents of the COMM_KEY_CONFIG data\n')
    file.write('//                 struct defs for each flagged structure from the\n')
    file.write('//                 BIParser input (.def) file.\n')
    file.write('//------------------------------------------------------------------------\n')
    file.write('\n')
    file.write('#include <stdio.h>\n')
    file.write(BP_Dict['BP_CPP_open'] + '\n')
    file.write('\n')
    file.write('#include "cbi_conv_protos.h"\n')
    file.write('#include "cbi_core_inst_includes.h"\n')
    
    file.write('#include "' + lower(inst_type) + '_types_a.h"\n')
    file.write('#include "' + lower(inst_type)+ '_tags_a.h"\n')
    if inst_type != 'CBI':
        file.write('#include "' + lower(inst_type) + '_protos_a.h"\n')
    file.write('\n')
    file.write('\n')
    file.write('//================================================================\n')

## def write_config_footer():
##     print BP_Dict["BP_CPP_close"]
##     print "\n\n#endif //..config_H"

def write_config_footer_new(file):
    file.write( BP_Dict["BP_CPP_close"] )
    file.write('\n\n#endif //..config_H\n')

#---------------------------------------------------------------------
# This writes out the needed modified boilerplate text into the
# TAGS header file.
#
# Parameters:
#      defname : Name of the .def file from which this was generated
#---------------------------------------------------------------------
## def write_tags_header(typlat, defname, date):
##     print "#ifndef "+typlat+"_TAGS_A_H"
##     print "#define "+typlat+"_TAGS_A_H"
##     print ""
##     print BP_Dict["BP_DNE"]    
##     print "// File         :  "+lower(typlat)+"_tags_a.h"
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  :  This file was automatically generated by the BIParser."
##     print "//                 It defines a unique tag ID # for each of the"
##     print "//                 communication data structures employed for the given"
##     print "//                 platform(s)."
##     print "//                 This tag ID # is what is used as an index into the "
##     print "//                 instrument's on-board packet size/packet address tables"
##     print "//                 for FPGA-mediated structure addressing.  It is also"
##     print "//                 used to allow the user, within control system code, to "
##     print "//                 indicate which structure should be transferred during a"
##     print "//                 cbi_gp_struct() READ/WRITE operation."
##     print "//------------------------------------------------------------------------"
##     print ""
##     print "#include \"cbi_core_inst_includes.h\""
    
##     if typlat.find("CBI") == -1:
##         print "#include \""+lower(typlat)+"_types_a.h\""
##         print "#include \"cbi_types_a.h\""
##     if typlat.find("CBI") == -1:
##         print "#include \"cbi_tags_a.h\""
##     print ""
##     print ""
##     print "//================================================================\n"

def write_tags_header_new(file, inst_type, date):
    file.write('#ifndef ' + inst_type + '_TAGS_A_H \n')
    file.write('#define ' + inst_type + '_TAGS_A_H \n')
    file.write('\n')
    file.write(BP_Dict['BP_DNE'] + '\n')
    file.write('// File         :  ' + lower(inst_type) + '_tags_a.h \n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  :  This file was automatically generated by the BIParser.\n')
    file.write('//                 It defines a unique tag ID # for each of the\n')
    file.write('//                 communication data structures employed for the given\n')
    file.write('//                 platform(s).\n')
    file.write('//                 This tag ID # is what is used as an index into the \n')
    file.write('//                 instrument\'s on-board packet size/packet address tables\n')
    file.write('//                 for FPGA-mediated structure addressing.  It is also\n')
    file.write('//                 used to allow the user, within control system code, to \n')
    file.write('//                 indicate which structure should be transferred during a\n')
    file.write('//                 cbi_gp_struct() READ/WRITE operation.\n')
    file.write('//------------------------------------------------------------------------\n')
    file.write('\n')
    file.write('#include "cbi_core_inst_includes.h" \n')
    
    if inst_type != 'CBI':
        file.write('#include "' + lower(inst_type) + '_types_a.h" \n')
        file.write('#include "cbi_types_a.h" \n')
        file.write('#include "cbi_tags_a.h" \n')
    file.write('\n\n')
    file.write('//================================================================\n')

## def write_tags_footer():
##     print "#endif"

def write_tags_footer_new(file):
    file.write('#endif\n')


#---------------------------------------------------------------------
# This writes out the needed modified boilerplate text into the
# INIT C code file.
#
# Parameters:
#      defname : Name of the .def file from which this was generated
#---------------------------------------------------------------------
## def write_init_header(typlat, defname, date):
##     print ""
##     print BP_Dict["BP_DNE"] 
##     print "// File         :  "+lower(typlat)+"_init_a.c"
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  :  This file was automatically generated by the BIParser."
##     print "//                 It initializes one instrument's worth of communication"
##     print "//                 data structures for a particular platform."
##     print "//                 This routine is for CONTROL application usage only."
##     print "//------------------------------------------------------------------------"
##     print ""
##     print "// ACC System Includes"
##     print "#include \"CESR_platform.h\""
##     print "#include \"utilities.h\""
##     print ""
##     print "#define " + typlat + "_NO_EXTERN"
##     print ""

##     print "#include \"cbi_core_includes.h\""
##     print "#include \""+lower(typlat)+"_config_a.h\""
##     print ""
##     print "//================================================================\n\n"
##     print ""
##     print ""

def write_init_header_new(file, inst_type, date):
    file.write('\n')
    file.write(BP_Dict['BP_DNE'] + '\n')
    file.write('// File         :  ' + lower(inst_type) + '_init_a.c\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  :  This file was automatically generated by the BIParser.\n')
    file.write('//                 It initializes one instrument\'s worth of communication\n')
    file.write('//                 data structures for a particular platform.\n')
    file.write('//                 This routine is for CONTROL application usage only.\n')
    file.write('//------------------------------------------------------------------------\n')
    file.write('\n')
    file.write('// ACC System Includes\n')
    file.write('#include "CESR_platform.h"\n')
    file.write('#include "utilities.h"\n')
    file.write('\n')
    file.write('#define ' + inst_type + '_NO_EXTERN' + '\n')
    file.write('\n')
    file.write('#include "cbi_core_includes.h"\n')
    file.write('#include "' + lower(inst_type) + '_config_a.h"\n\n')

def write_init_footer():
    print ""





#---------------------------------------------------------------------
# This writes out the needed modified text for each
# conversion function routine source file requested.
#---------------------------------------------------------------------
## def write_conv_header(typlat, typename, name, date):
##     print BP_Dict["BP_DNE"]    
##     print "// File         :  " + name + "_convert_a.c"
##     print "// Date Created :  " + date
##     print "//"
##     print "// Description  :  This file was automatically generated by the BIParser."
##     print "//                 Converts between user-defined data structures by"
##     print "//                 employing low-level data type conversions between"
##     print "//                 the instrument's internal data representation and the"
##     print "//                 control system machine's internal data representation"
##     print "//                 if needed for each member of the structure."
##     print "//------------------------------------------------------------------------"
##     print "#include <stdio.h>"
##     print "#include <string.h>"
##     print "#include <math.h>"
##     print ""
##     print "#include \"CESR_platform.h\""
##     print "#include \"utilities.h\""
##     print "#include \"messages.h\""
##     print ""
##     print "#include \"cbi_constants.h\""
##     print "#include \"cbi_types_a.h\""
##     print "#include \"cbi_control_types.h\"\n"
##     print "#include \"cbi_conv_protos.h\""
##     print "#include \""+lower(typlat)+"_types_a.h\""
##     print "#include \""+lower(typlat)+"_protos_a.h\""

##     print "\n\n\n"
##     print "int * " + name + "_convert(int mode, int *p_buf, int dtype, int dcount,"
##     print "                           int offset, void *p_data) {"
##     print ""
##     print "//-----------------------------------------------------------------------+"
##     print "// Local Variables -                                                     |"
##     print "//                                                                       |"
##     print "// func_name  -  Pointer to name of the local function                   |"
##     print "//                                                                       |"
##     print "//-----------------------------------------------------------------------+"
##     print ""
##     print "   char *func_name = \"" + name + "_convert\";\n"
##     print "   int i;"
##     print "   " + typename + " *p_"+ name + " = NULL;"
##     print "   void *p_sub_data;\n"
##     print "   int count;"
##     print "   int idummy;\n"
##     print "   //-----------------------------------------------------------------------+"
##     print "   //                     EXECUTABLE CODE STARTS HERE                       |"
##     print "   //-----------------------------------------------------------------------+"
##     print "   if (dtype == CBI_STRUCT) {"
##     print "      p_" + name + " = ((" + typename + " *) p_data + dcount * offset);"
##     print "   } else {"
##     print "      idummy = sprintf(message,"
##     print "                       \"Invalid data type specified:  %d\\n\",dtype);"
##     print "      log_message(S_ERROR, func_name, message);"
##     print "      return NULL;"
##     print "   }\n"
##     print "   // Don't need to check for mode, simply pass the individual"
##     print "   // pieces of data in the struct to the relevant conversion "
##     print "   // routines"
##     print "   for (i = 0; i < dcount; i++) {\n"


def write_conv_header_new(file, inst_type, structname, date):
    file.write(BP_Dict["BP_DNE"] + '\n')
    file.write('// File         :  ' + structname + '_convert_a.c\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  :  This file was automatically generated by the BIParser.\n')
    file.write('//                 Converts between user-defined data structures by\n')
    file.write('//                 employing low-level data type conversions between\n')
    file.write('//                 the instrument\'s internal data representation and the\n')
    file.write('//                 control system machine\'s internal data representation\n')
    file.write('//                 if needed for each member of the structure.\n')
    file.write('//------------------------------------------------------------------------\n')
    file.write('#include <stdio.h>\n')
    file.write('#include <string.h>\n')
    file.write('#include <math.h>\n')
    file.write('\n')
    file.write('#include "CESR_platform.h"\n')
    file.write('#include "utilities.h"\n')
    file.write('#include "messages.h"\n')
    file.write('\n')
    file.write('#include "cbi_constants.h\"\n')
    file.write('#include "cbi_types_a.h\"\n')
    file.write('#include "cbi_control_types.h\"\n\n')
    file.write('#include "cbi_conv_protos.h\"\n')
    file.write('#include "' + lower(inst_type) + '_types_a.h"\n')
    file.write('#include "' + lower(inst_type) + '_protos_a.h"\n')
    file.write('\n\n\n\n')
    file.write('int * ' + lower(structname) + '_convert(int mode, int *p_buf, int dtype, int dcount,\n')
    file.write('                           int offset, void *p_data) {\n')
    file.write('\n')
    file.write('//-----------------------------------------------------------------------+\n')
    file.write('// Local Variables -                                                     |\n')
    file.write('//                                                                       |\n')
    file.write('// func_name  -  Pointer to name of the local function                   |\n')
    file.write('//                                                                       |\n')
    file.write('//-----------------------------------------------------------------------+\n')
    file.write('\n')
    file.write('   char *func_name = "' + lower(structname) + '_convert";\n\n')
    file.write('   int i;\n')
    file.write('   ' + structname + ' *p_' + lower(structname) + ' = NULL;\n')
    file.write('   void *p_sub_data;\n\n')
    file.write('   int count;\n')
    file.write('   int idummy;\n\n')
    file.write('   //-----------------------------------------------------------------------+\n')
    file.write('   //                     EXECUTABLE CODE STARTS HERE                       |\n')
    file.write('   //-----------------------------------------------------------------------+\n')
    file.write('   if (dtype == CBI_STRUCT) {\n')
    file.write('      p_' + lower(structname) + ' = ((' + structname + ' *) p_data + dcount * offset);\n')
    file.write('   } else {\n')
    file.write('      idummy = sprintf(message,\n')
    file.write('                       "Invalid data type specified:  %d\\n",dtype);\n')
    file.write('      log_message(S_ERROR, func_name, message);\n')
    file.write('      return NULL;\n')
    file.write('   }\n\n')
    file.write('   // Don\'t need to check for mode, simply pass the individual\n')
    file.write('   // pieces of data in the struct to the relevant conversion \n')
    file.write('   // routines\n')
    file.write('   for (i = 0; i < dcount; i++) {\n\n')


## def write_conv_footer(name):
##     print "      //Increment the data pointer"
##     print "      p_" + name + "++;"
##     print "   }\n"
##     print "   return p_buf;"
##     print "}"

def write_conv_footer_new(file, structname):
    file.write('      //Increment the data pointer\n')
    file.write('      p_' + lower(structname) + '++;\n')
    file.write('   }\n\n')
    file.write('   return p_buf;\n')
    file.write('}\n')
              
## #---------------------------------------
## def write_protos_header(typlat, defname, date):
##     print BP_Dict["BP_DNE"]
##     print "// File         :  "+ typlat + "_protos_a.h"
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  : This file was automatically generated by the BIParser."
##     print "//                It contains C prototypes for the custom datatype conversion"
##     print "//                functions that were generated for derived typedefs."
##     print "//----------------------------------------------------------------------------"
                                
def write_protos_header_new(file, inst_type, date):
    file.write(BP_Dict['BP_DNE'] + '\n')
    file.write('// File         :  ' + inst_type + '_protos_a.h\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  : This file was automatically generated by the BIParser.\n')
    file.write('//                It contains C prototypes for the custom datatype conversion\n')
    file.write('//                functions that were generated for derived typedefs.\n')
    file.write('//----------------------------------------------------------------------------\n')


## #---------------------------------------
## def write_INST_struct_decs_header(typlat, defname, date):
##     print ""
##     print "#ifndef "+typlat+"_INST_DECS_A_H"
##     print "#define "+typlat+"_INST_DECS_A_H"
##     print BP_Dict["BP_DNE"]
##     print "// File         :  "+ lower(typlat) + "_INST_decs_a.h"
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  : This file was automatically generated by the BIParser."
##     print "//                It contains communications data structure declarations"
##     print "//                internal to the instrument"
##     print "//----------------------------------------------------------------------------"
##     print "\n"
##     if typlat.find("CBI") == -1:
##         print "#include \""+lower(typlat)+"_commstructs_a.h\"\n"
##     print BP_Dict["BP_CPP_open"]
##     print ""
##     print ""
##     print "// Declare all structures used for communicating with control system."
##     print "// Storage space will be allocated by the routine that defines "
##     print "// INST_NO_EXTERN.  All other routines will refer to that space."
##     print "// Anything that the control system can change must be declared \"volatile\""
##     print "// so that the compiler does not try to optimize it out.\n"
##     print "#if defined (INST_NO_EXTERN)\n"


def write_INST_struct_decs_header_new(file, inst_type, date):
    file.write('\n')
    file.write('#ifndef ' + inst_type + '_INST_DECS_A_H\n')
    file.write('#define ' + inst_type + '_INST_DECS_A_H\n')
    file.write(BP_Dict['BP_DNE'] + '\n')
    file.write('// File         :  ' + lower(inst_type) + '_INST_decs_a.h\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  : This file was automatically generated by the BIParser.\n')
    file.write('//                It contains communications data structure declarations\n')
    file.write('//                internal to the instrument\n')
    file.write('//----------------------------------------------------------------------------\n')
    file.write('\n')
    if inst_type != 'CBI':
        file.write('#include "' + lower(inst_type) + '_commstructs_a.h"\n')
    file.write(BP_Dict['BP_CPP_open'] + '\n')
    file.write('\n\n')
    file.write('// Declare all structures used for communicating with control system.\n')
    file.write('// Storage space will be allocated by the routine that defines \n')
    file.write('// INST_NO_EXTERN.  All other routines will refer to that space.\n')
    file.write('// Anything that the control system can change must be declared "volatile"\n')
    file.write('// so that the compiler does not try to optimize it out.\n\n')
    file.write('#if defined (INST_NO_EXTERN)\n\n')


## def write_INST_struct_decs_footer():
##     print "\n\n#endif //(..._NO_EXTERN)\n\n"
##     print BP_Dict["BP_CPP_close"]
##     print "\n\n#endif // INST_..._H"


def write_INST_struct_decs_footer_new(file):
    file.write('\n\n#endif //(..._NO_EXTERN)\n\n')
    file.write(BP_Dict['BP_CPP_close'] + '\n')
    file.write('\n\n#endif // INST_..._H\n')


## #---------------------------------------
## def write_INST_packet_tables_header(typlat, defname, date):
##     print BP_Dict["BP_DNE"]
##     print "// File         :  " + lower(typlat) + "_pkt_tables_a.h"
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  : This file was automatically generated by the BIParser."
##     print "//                It provides packet address table and packet size table"
##     print "//                initialization code as well as an instrument memory"
##     print "//                usage summary for the communication data structures."
##     print "//------------------------------------------------------------------------"
##     print "\n"
##     print BP_Dict["BP_CPP_open"]
##     print ""
##     print "// System"
##     print "#include <defts101.h>\n"      # Investigate generalizing this to accomodate a range of different processors
##     print "// Core"                      # Would also be useful for mempory map/usage calculation.
##     print "#include \"dig_board_6048-113.h\"\n"
##     print "#include \"cbi_core_inst_includes.h\""
    
##     if typlat == "CBI":
##         print "#include \"cbi_commstructs_a.h\"\n"
##     print "//Local"
##     print "#include \""+ lower(typlat) + "_tags_a.h\""
##     if typlat.find("CBI") == -1:
##         print "#include \""+ lower(typlat) + "_commstructs_a.h\""
##         print "#include \""+ lower(typlat) + "_system.h\""
##         print "#include \""+ lower(typlat) + "_trace.h\"\n\n"


 
def write_INST_packet_tables_header_new(file, inst_type, date):
    file.write(BP_Dict['BP_DNE'] + '\n')
    file.write('// File         :  ' + lower(inst_type) + '_pkt_tables_a.h\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  : This file was automatically generated by the BIParser.\n')
    file.write('//                It provides packet address table and packet size table\n')
    file.write('//                initialization code as well as an instrument memory\n')
    file.write('//                usage summary for the communication data structures.\n')
    file.write('//------------------------------------------------------------------------\n')
    file.write('\n\n')
    file.write(BP_Dict['BP_CPP_open'] + '\n')
    file.write('\n')
    file.write('// System\n')
    file.write('#include <defts101.h>\n')      # Investigate generalizing this to accomodate a range of different processors
    file.write('// Core\n')                      # Would also be useful for mempory map/usage calculation.
    file.write('#include "dig_board_6048-113.h"\n')
    file.write('#include "cbi_core_inst_includes.h"\n')
    
    if inst_type == 'CBI':
        file.write('#include "cbi_commstructs_a.h"\n')
    file.write('//Local\n')
    file.write('#include "' + lower(inst_type) + '_tags_a.h"\n')
    if inst_type != 'CBI':
        file.write('#include "' + lower(inst_type) + '_commstructs_a.h"\n')
        file.write('#include "' + lower(inst_type) + '_system.h\"\n\n')
        file.write('#include "' + lower(inst_type) + '_trace.h"\n\n')

    
## #---------------------------------------
## def write_dump_header(filename, defname, date):
##     print "//------------------------------------------------------------------------"
##     print "// File         :  " + filename
##     print "// Date Created :  " + date
##     print "// Input File   :  " + defname
##     print "//"
##     print "// Description  : This file was automatically genrated by the BIParser."
##     print "//                It is not a critical component of the communication data"
##     print "//                structure imaging mechanism, and as such may be edited to"
##     print "//                adjust the specific formatting employed when dumping the"
##     print "//                contents of a given data structure without having to "
##     print "//                re-run the BIParser."
##     print "//"
##     print "//                Note: If this file is edited and the BIParser is re-run"
##     print "//                      and its output installed, the changes made to this"
##     print "//                      file may be lost.  Make a backup copy of this file"
##     print "//                      if you edit it."
##     print "//------------------------------------------------------------------------\n"



    
def write_dump_header_new(file, filename, date):
    file.write('//------------------------------------------------------------------------\n')
    file.write('// File         :  ' + filename + '\n')
    file.write('// Date Created :  ' + date + '\n')
    file.write('//\n')
    file.write('// Description  : This file was automatically genrated by the BIParser.\n')
    file.write('//                It is not a critical component of the communication data\n')
    file.write('//                structure imaging mechanism, and as such may be edited to\n')
    file.write('//                adjust the specific formatting employed when dumping the\n')
    file.write('//                contents of a given data structure without having to \n')
    file.write('//                re-run the BIParser.\n')
    file.write('//\n')
    file.write('//                Note: If this file is edited and the BIParser is re-run\n')
    file.write('//                      and its output installed, the changes made to this\n')
    file.write('//                      file may be lost.  Make a backup copy of this file\n')
    file.write('//                      if you edit it.\n')
    file.write('//------------------------------------------------------------------------\n\n')
